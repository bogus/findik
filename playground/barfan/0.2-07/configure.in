# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT([findik],[0.2g],[findikmail@gmail.com])
AC_CONFIG_SRCDIR([src/main/findik.cpp])
AC_CONFIG_HEADERS([src/include/config/config.h])

AC_SUBST([TEST_SYSTEM])

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_LIBTOOL
AC_PROG_RANLIB
AC_LANG(C++)


DX_HTML_FEATURE(ON)
DX_CHM_FEATURE(OFF)
DX_CHI_FEATURE(OFF)
DX_MAN_FEATURE(ON)
DX_RTF_FEATURE(OFF)
DX_XML_FEATURE(OFF)
DX_PDF_FEATURE(ON)
DX_PS_FEATURE(OFF)
DX_INIT_DOXYGEN(findik, doxygen.cfg)

AM_INIT_AUTOMAKE

# Checks for libraries.
# ex: AC_CHECK_LIB([name],[break])
AC_CHECK_LIB([pthread],[break])
AC_CHECK_LIB([boost_thread],[break])
AC_CHECK_LIB([boost_system],[break])
AC_CHECK_LIB([crypt],[break])
AC_CHECK_LIB([crypto],[break])
AC_CHECK_LIB([log4cxx],[break])
AC_CHECK_LIB([config++],[break])
AC_CHECK_LIB([z],[break])
AC_CHECK_LIB([mysqlpp],[break])

# Checks for header files.
AC_CHECK_HEADER([pthread.h],[break])
AC_CHECK_HEADER([boost/asio.hpp],[break])
AC_CHECK_HEADER([boost/array.hpp],[break])
AC_CHECK_HEADER([boost/shared_ptr.hpp],[break])
AC_CHECK_HEADER([boost/bind.hpp],[break])
AC_CHECK_HEADER([boost/function.hpp],[break])
AC_CHECK_HEADER([boost/lexical_cast.hpp],[break])
AC_CHECK_HEADER([boost/logic/tribool.hpp],[break])
AC_CHECK_HEADER([boost/foreach.hpp],[break])
AC_CHECK_HEADER([boost/noncopyable.hpp],[break])
AC_CHECK_HEADER([boost/tuple/tuple.hpp],[break])
AC_CHECK_HEADER([boost/thread.hpp],[break])

AC_CHECK_HEADER([buffio.h],[break])
AC_CHECK_HEADER([libconfig.h++],[break])
AC_CHECK_HEADER([mysql++/mysql++.h],[break])
AC_CHECK_HEADER([zlib.h],[break])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_TYPE_SIZE_T


# asking user if they want MAGIC support
AC_MSG_CHECKING(for LIBMAGIC support enabled)
AC_ARG_ENABLE(
magic,
[AC_HELP_STRING([--enable-magic@<:@=yes@:>@], [Enable support for the MAGIC-FILE library])],
[ if test "x$enableval" = "xno"; then
        magic=false
        AC_MSG_RESULT(no)
else
        magic=true
        AC_MSG_RESULT(yes)
fi
],
[ # enable by default
        magic=true
        AC_MSG_RESULT(yes)
]
)
if test "x$magic" = "xtrue"; then
	AC_CHECK_HEADER([magic.h],[break])
	AC_CHECK_LIB([magic],[break])
        AC_DEFINE([HAVE_MAGIC],[],[Define to enable MAGIC support])
        MAGIC_LIBS="-lmagic ${MAGIC_LIBS}"
else
        AC_CHECK_FUNCS([printf])
fi
AM_CONDITIONAL(HAVE_MAGIC, test "x$magic" = "xtrue")

# asking user if they want CLAMDAV support
AC_MSG_CHECKING(for CLAMD AV support enabled)
AC_ARG_ENABLE(
clamdav,
[AC_HELP_STRING([--enable-clamdav@<:@=yes@:>@], [Enable support for the CLAMD AV])],
[ if test "x$enableval" = "xno"; then
        clamdav=false
        AC_MSG_RESULT(no)
else
        clamdav=true
        AC_MSG_RESULT(yes)
fi
],
[ # enable by default
        clamdav=true
        AC_MSG_RESULT(yes)
]
)
if test "x$clamdav" = "xtrue"; then
        AC_DEFINE([HAVE_CLAMD],[],[Define to enable CLAMD AV support])
else
        AC_CHECK_FUNCS([printf])
fi
AM_CONDITIONAL(HAVE_CLAMD, test "x$clamdav" = "xtrue")

# asking user if they want FILE EXT support
AC_MSG_CHECKING(for FILEEXT support enabled)
AC_ARG_ENABLE(
fileext,
[AC_HELP_STRING([--enable-fileext@<:@=yes@:>@], [Enable support for the FILE EXT Filter])],
[ if test "x$enableval" = "xno"; then
        fileext=false
        AC_MSG_RESULT(no)
else
        fileext=true
        AC_MSG_RESULT(yes)
fi
],
[ # enable by default
        fileext=true
        AC_MSG_RESULT(yes)
]
)
if test "x$fileext" = "xtrue"; then
        AC_DEFINE([HAVE_FILEEXT],[],[Define to enable File Extension support])
else
        AC_CHECK_FUNCS([printf])
fi
AM_CONDITIONAL(HAVE_FILEEXT, test "x$fileext" = "xtrue")

# asking user if they want PCRE support
AC_MSG_CHECKING(for PCRE support enabled)
AC_ARG_ENABLE(
pcre,
[AC_HELP_STRING([--enable-pcre@<:@=yes@:>@], [Enable support for the PCRE])],
[ if test "x$enableval" = "xno"; then
        pcre=false
        AC_MSG_RESULT(no)
else
        pcre=true
        AC_MSG_RESULT(yes)
fi
],
[ # enable by default
        pcre=true
        AC_MSG_RESULT(yes)
]
)
if test "x$pcre" = "xtrue"; then
	AC_CHECK_HEADER([pcrecpp.h],[break])
	AC_CHECK_LIB([pcrecpp],[break])
        AC_DEFINE([HAVE_PCRE],[],[Define to enable PCRE support])
else
        AC_CHECK_FUNCS([printf])
fi
AM_CONDITIONAL(HAVE_PCRE, test "x$pcre" = "xtrue")

# asking user if they want AD_KERB support
AC_MSG_CHECKING(for Active Directory Kerberos support enabled)
AC_ARG_ENABLE(
adkerb,
[AC_HELP_STRING([--enable-adkerb@<:@=yes@:>@], [Enable support for the Active Directory Kerberos])],
[ if test "x$enableval" = "xno"; then
        adkerb=false
        AC_MSG_RESULT(no)
else
        adkerb=true
        AC_MSG_RESULT(yes)
fi
],
[ # enable by default
        adkerb=true
        AC_MSG_RESULT(yes)
]
)
if test "x$adkerb" = "xtrue"; then
	AC_CHECK_HEADER([gssapi/gssapi.h],[break])
	AC_CHECK_HEADER([krb5.h],[break])
	AC_CHECK_LIB([gssapi],[break])
        AC_DEFINE([HAVE_ADKERB],[],[Define to enable Active Directory Kerberos support])
else
        AC_CHECK_FUNCS([printf])
fi
AM_CONDITIONAL(HAVE_ADKERB, test "x$adkerb" = "xtrue")

# asking user if they want LDAP support
AC_MSG_CHECKING(for LDAP support enabled)
AC_ARG_ENABLE(
ldap,
[AC_HELP_STRING([--enable-ldap@<:@=yes@:>@], [Enable support for the LDAP support])],
[ if test "x$enableval" = "xno"; then
        ldap=false
        AC_MSG_RESULT(no)
else
        ldap=true
        AC_MSG_RESULT(yes)
fi
],
[ # enable by default
        ldap=true
        AC_MSG_RESULT(yes)
]
)
if test "x$ldap" = "xtrue"; then
	AC_CHECK_HEADER([ldap.h],[break])
        AC_DEFINE([HAVE_LDAP],[],[Define to enable LDAP support])
else
        AC_CHECK_FUNCS([printf])
fi
AM_CONDITIONAL(HAVE_LDAP, test "x$ldap" = "xtrue")

# asking user if they want TIDY support
AC_MSG_CHECKING(for TIDY support enabled)
AC_ARG_ENABLE(
tidy,
[AC_HELP_STRING([--enable-tidy@<:@=no@:>@], [Enable support for the TIDY library])],
[ if test "x$enableval" = "xno"; then
	tidy=false
	AC_MSG_RESULT(no)
else
	tidy=true
	AC_MSG_RESULT(yes)
fi
],
[ # disable by default
	tidy=false
	AC_MSG_RESULT(no)
]
)
if test "x$tidy" = "xtrue"; then
AC_CHECK_HEADER([tidy.h],[break])
	AC_CHECK_HEADER([tidy.h],[break])
	AC_CHECK_LIB([tidy],[break])
	AC_DEFINE([HAVE_TIDY],[],[Define to enable TIDY support])
	TIDY_LIBS="-ltidy ${TIDY_LIBS}"
else
	AC_CHECK_FUNCS([printf])
fi
AM_CONDITIONAL(HAVE_TIDY, test "x$tidy" = "xtrue")



AC_CONFIG_FILES([
	Makefile
	conf/Makefile
	packaging/Makefile
	scripts/Makefile
	sql/Makefile
	src/Makefile
	src/cli/Makefile
	src/cli/blimporter/Makefile
	src/include/Makefile
	src/main/Makefile
	src/main/authenticator/Makefile
	src/main/config/Makefile
	src/main/filter/Makefile
	src/main/logging/Makefile
	src/main/io/Makefile
	src/main/parser/Makefile
	src/main/persistency/Makefile
	src/main/protocols/Makefile
	src/main/protocols/http/Makefile
	src/main/protocols/http/auth_util/Makefile
	src/main/service/Makefile
	src/main/util/Makefile
	src/test/Makefile
])

# Checks for library functions.
AC_OUTPUT([
	findik.spec
])


